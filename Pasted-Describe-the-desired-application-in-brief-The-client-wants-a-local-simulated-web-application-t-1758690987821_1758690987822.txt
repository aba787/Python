Describe the desired application (in brief):

The client wants a local/simulated web application that works as follows:

Runs on Replit (or a local machine) — everything is built into the project, with no real traffic coming from outside.

It has a dashboard interface that displays:

Alerts table (time, threat level, attack type, message, default source).

Live statistics/charts (number of attacks by type, HIGH/MEDIUM/LOW ratio over the last 5 minutes).

Control buttons to run real-time simulation scenarios (SQLi, SYN flood, phishing, port scan, malware beacon).

A button to run a background generator to demonstrate system continuity.

A log viewer that shows more details for each alert when clicked.

It has a local vulnerable web application (optional) — a simple page containing a login form and fields containing simulated vulnerabilities (but not an actual attack); usually for demonstration purposes only.

It contains control files (demo_trigger.py or API endpoints) that create alerts by inserting them into the database—these are the simulated "attacks."

What the teacher sees during the demo (expected)

A dashboard opens; it displays a "quiet" log or a running random generation.

You give a quick explanation (30–45 seconds): the purpose of the demo, the simulation mechanism, and the reason for not running real attacks.

You click a scenario button (e.g., SQLi) → instant alerts appear with a HIGH level and a simple explanation: "The system detected a payload similar to SQL keywords, raised a HIGH alarm."

You run a SYN flood scenario → you see an increase in alert rates, a graph showing the spike, and you explain how the detector relies on connection rates as a metric.

You display the log and show examples of false positives and how you can reduce them (additional rules, a better ML model).

That's it: you receive development points (training dataset, transfer training to Colab/server, testing with real packets in an authorized lab environment).